/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardLayoutRouteImport } from './routes/_dashboard/layout'
import { Route as RouteRouteImport } from './routes/route'
import { Route as DashboardProjectsLayoutRouteImport } from './routes/_dashboard/projects/layout'
import { Route as DashboardChatLayoutRouteImport } from './routes/_dashboard/chat/layout'
import { Route as DashboardReportsRouteRouteImport } from './routes/_dashboard/reports/route'
import { Route as DashboardProjectsRouteRouteImport } from './routes/_dashboard/projects/route'
import { Route as DashboardDocketsRouteRouteImport } from './routes/_dashboard/dockets/route'
import { Route as DashboardDirectoryRouteRouteImport } from './routes/_dashboard/directory/route'
import { Route as DashboardChatRouteRouteImport } from './routes/_dashboard/chat/route'
import { Route as DashboardAdminRouteRouteImport } from './routes/_dashboard/admin/route'
import { Route as AuthOtpVerificationRouteRouteImport } from './routes/_auth/otp-verification/route'
import { Route as AuthNewPasswordRouteRouteImport } from './routes/_auth/new-password/route'
import { Route as DashboardProjectsIdRouteRouteImport } from './routes/_dashboard/projects/$id/route'
import { Route as DashboardChatIdRouteRouteImport } from './routes/_dashboard/chat/$id/route'

const DashboardLayoutRoute = DashboardLayoutRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const RouteRoute = RouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardProjectsLayoutRoute = DashboardProjectsLayoutRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => DashboardLayoutRoute,
} as any)
const DashboardChatLayoutRoute = DashboardChatLayoutRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => DashboardLayoutRoute,
} as any)
const DashboardReportsRouteRoute = DashboardReportsRouteRouteImport.update({
  id: '/reports/',
  path: '/reports/',
  getParentRoute: () => DashboardLayoutRoute,
} as any)
const DashboardProjectsRouteRoute = DashboardProjectsRouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardProjectsLayoutRoute,
} as any)
const DashboardDocketsRouteRoute = DashboardDocketsRouteRouteImport.update({
  id: '/dockets/',
  path: '/dockets/',
  getParentRoute: () => DashboardLayoutRoute,
} as any)
const DashboardDirectoryRouteRoute = DashboardDirectoryRouteRouteImport.update({
  id: '/directory/',
  path: '/directory/',
  getParentRoute: () => DashboardLayoutRoute,
} as any)
const DashboardChatRouteRoute = DashboardChatRouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardChatLayoutRoute,
} as any)
const DashboardAdminRouteRoute = DashboardAdminRouteRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => DashboardLayoutRoute,
} as any)
const AuthOtpVerificationRouteRoute =
  AuthOtpVerificationRouteRouteImport.update({
    id: '/_auth/otp-verification/',
    path: '/otp-verification/',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthNewPasswordRouteRoute = AuthNewPasswordRouteRouteImport.update({
  id: '/_auth/new-password/',
  path: '/new-password/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardProjectsIdRouteRoute =
  DashboardProjectsIdRouteRouteImport.update({
    id: '/$id/',
    path: '/$id/',
    getParentRoute: () => DashboardProjectsLayoutRoute,
  } as any)
const DashboardChatIdRouteRoute = DashboardChatIdRouteRouteImport.update({
  id: '/$id/',
  path: '/$id/',
  getParentRoute: () => DashboardChatLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof RouteRoute
  '/chat': typeof DashboardChatLayoutRouteWithChildren
  '/projects': typeof DashboardProjectsLayoutRouteWithChildren
  '/new-password': typeof AuthNewPasswordRouteRoute
  '/otp-verification': typeof AuthOtpVerificationRouteRoute
  '/admin': typeof DashboardAdminRouteRoute
  '/chat/': typeof DashboardChatRouteRoute
  '/directory': typeof DashboardDirectoryRouteRoute
  '/dockets': typeof DashboardDocketsRouteRoute
  '/projects/': typeof DashboardProjectsRouteRoute
  '/reports': typeof DashboardReportsRouteRoute
  '/chat/$id': typeof DashboardChatIdRouteRoute
  '/projects/$id': typeof DashboardProjectsIdRouteRoute
}
export interface FileRoutesByTo {
  '/': typeof RouteRoute
  '/new-password': typeof AuthNewPasswordRouteRoute
  '/otp-verification': typeof AuthOtpVerificationRouteRoute
  '/admin': typeof DashboardAdminRouteRoute
  '/chat': typeof DashboardChatRouteRoute
  '/directory': typeof DashboardDirectoryRouteRoute
  '/dockets': typeof DashboardDocketsRouteRoute
  '/projects': typeof DashboardProjectsRouteRoute
  '/reports': typeof DashboardReportsRouteRoute
  '/chat/$id': typeof DashboardChatIdRouteRoute
  '/projects/$id': typeof DashboardProjectsIdRouteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof RouteRoute
  '/_dashboard': typeof DashboardLayoutRouteWithChildren
  '/_dashboard/chat': typeof DashboardChatLayoutRouteWithChildren
  '/_dashboard/projects': typeof DashboardProjectsLayoutRouteWithChildren
  '/_auth/new-password/': typeof AuthNewPasswordRouteRoute
  '/_auth/otp-verification/': typeof AuthOtpVerificationRouteRoute
  '/_dashboard/admin/': typeof DashboardAdminRouteRoute
  '/_dashboard/chat/': typeof DashboardChatRouteRoute
  '/_dashboard/directory/': typeof DashboardDirectoryRouteRoute
  '/_dashboard/dockets/': typeof DashboardDocketsRouteRoute
  '/_dashboard/projects/': typeof DashboardProjectsRouteRoute
  '/_dashboard/reports/': typeof DashboardReportsRouteRoute
  '/_dashboard/chat/$id/': typeof DashboardChatIdRouteRoute
  '/_dashboard/projects/$id/': typeof DashboardProjectsIdRouteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat'
    | '/projects'
    | '/new-password'
    | '/otp-verification'
    | '/admin'
    | '/chat/'
    | '/directory'
    | '/dockets'
    | '/projects/'
    | '/reports'
    | '/chat/$id'
    | '/projects/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/new-password'
    | '/otp-verification'
    | '/admin'
    | '/chat'
    | '/directory'
    | '/dockets'
    | '/projects'
    | '/reports'
    | '/chat/$id'
    | '/projects/$id'
  id:
    | '__root__'
    | '/'
    | '/_dashboard'
    | '/_dashboard/chat'
    | '/_dashboard/projects'
    | '/_auth/new-password/'
    | '/_auth/otp-verification/'
    | '/_dashboard/admin/'
    | '/_dashboard/chat/'
    | '/_dashboard/directory/'
    | '/_dashboard/dockets/'
    | '/_dashboard/projects/'
    | '/_dashboard/reports/'
    | '/_dashboard/chat/$id/'
    | '/_dashboard/projects/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  RouteRoute: typeof RouteRoute
  DashboardLayoutRoute: typeof DashboardLayoutRouteWithChildren
  AuthNewPasswordRouteRoute: typeof AuthNewPasswordRouteRoute
  AuthOtpVerificationRouteRoute: typeof AuthOtpVerificationRouteRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/projects': {
      id: '/_dashboard/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof DashboardProjectsLayoutRouteImport
      parentRoute: typeof DashboardLayoutRoute
    }
    '/_dashboard/chat': {
      id: '/_dashboard/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof DashboardChatLayoutRouteImport
      parentRoute: typeof DashboardLayoutRoute
    }
    '/_dashboard/reports/': {
      id: '/_dashboard/reports/'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof DashboardReportsRouteRouteImport
      parentRoute: typeof DashboardLayoutRoute
    }
    '/_dashboard/projects/': {
      id: '/_dashboard/projects/'
      path: '/'
      fullPath: '/projects/'
      preLoaderRoute: typeof DashboardProjectsRouteRouteImport
      parentRoute: typeof DashboardProjectsLayoutRoute
    }
    '/_dashboard/dockets/': {
      id: '/_dashboard/dockets/'
      path: '/dockets'
      fullPath: '/dockets'
      preLoaderRoute: typeof DashboardDocketsRouteRouteImport
      parentRoute: typeof DashboardLayoutRoute
    }
    '/_dashboard/directory/': {
      id: '/_dashboard/directory/'
      path: '/directory'
      fullPath: '/directory'
      preLoaderRoute: typeof DashboardDirectoryRouteRouteImport
      parentRoute: typeof DashboardLayoutRoute
    }
    '/_dashboard/chat/': {
      id: '/_dashboard/chat/'
      path: '/'
      fullPath: '/chat/'
      preLoaderRoute: typeof DashboardChatRouteRouteImport
      parentRoute: typeof DashboardChatLayoutRoute
    }
    '/_dashboard/admin/': {
      id: '/_dashboard/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof DashboardAdminRouteRouteImport
      parentRoute: typeof DashboardLayoutRoute
    }
    '/_auth/otp-verification/': {
      id: '/_auth/otp-verification/'
      path: '/otp-verification'
      fullPath: '/otp-verification'
      preLoaderRoute: typeof AuthOtpVerificationRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/new-password/': {
      id: '/_auth/new-password/'
      path: '/new-password'
      fullPath: '/new-password'
      preLoaderRoute: typeof AuthNewPasswordRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard/projects/$id/': {
      id: '/_dashboard/projects/$id/'
      path: '/$id'
      fullPath: '/projects/$id'
      preLoaderRoute: typeof DashboardProjectsIdRouteRouteImport
      parentRoute: typeof DashboardProjectsLayoutRoute
    }
    '/_dashboard/chat/$id/': {
      id: '/_dashboard/chat/$id/'
      path: '/$id'
      fullPath: '/chat/$id'
      preLoaderRoute: typeof DashboardChatIdRouteRouteImport
      parentRoute: typeof DashboardChatLayoutRoute
    }
  }
}

interface DashboardChatLayoutRouteChildren {
  DashboardChatRouteRoute: typeof DashboardChatRouteRoute
  DashboardChatIdRouteRoute: typeof DashboardChatIdRouteRoute
}

const DashboardChatLayoutRouteChildren: DashboardChatLayoutRouteChildren = {
  DashboardChatRouteRoute: DashboardChatRouteRoute,
  DashboardChatIdRouteRoute: DashboardChatIdRouteRoute,
}

const DashboardChatLayoutRouteWithChildren =
  DashboardChatLayoutRoute._addFileChildren(DashboardChatLayoutRouteChildren)

interface DashboardProjectsLayoutRouteChildren {
  DashboardProjectsRouteRoute: typeof DashboardProjectsRouteRoute
  DashboardProjectsIdRouteRoute: typeof DashboardProjectsIdRouteRoute
}

const DashboardProjectsLayoutRouteChildren: DashboardProjectsLayoutRouteChildren =
  {
    DashboardProjectsRouteRoute: DashboardProjectsRouteRoute,
    DashboardProjectsIdRouteRoute: DashboardProjectsIdRouteRoute,
  }

const DashboardProjectsLayoutRouteWithChildren =
  DashboardProjectsLayoutRoute._addFileChildren(
    DashboardProjectsLayoutRouteChildren,
  )

interface DashboardLayoutRouteChildren {
  DashboardChatLayoutRoute: typeof DashboardChatLayoutRouteWithChildren
  DashboardProjectsLayoutRoute: typeof DashboardProjectsLayoutRouteWithChildren
  DashboardAdminRouteRoute: typeof DashboardAdminRouteRoute
  DashboardDirectoryRouteRoute: typeof DashboardDirectoryRouteRoute
  DashboardDocketsRouteRoute: typeof DashboardDocketsRouteRoute
  DashboardReportsRouteRoute: typeof DashboardReportsRouteRoute
}

const DashboardLayoutRouteChildren: DashboardLayoutRouteChildren = {
  DashboardChatLayoutRoute: DashboardChatLayoutRouteWithChildren,
  DashboardProjectsLayoutRoute: DashboardProjectsLayoutRouteWithChildren,
  DashboardAdminRouteRoute: DashboardAdminRouteRoute,
  DashboardDirectoryRouteRoute: DashboardDirectoryRouteRoute,
  DashboardDocketsRouteRoute: DashboardDocketsRouteRoute,
  DashboardReportsRouteRoute: DashboardReportsRouteRoute,
}

const DashboardLayoutRouteWithChildren = DashboardLayoutRoute._addFileChildren(
  DashboardLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  RouteRoute: RouteRoute,
  DashboardLayoutRoute: DashboardLayoutRouteWithChildren,
  AuthNewPasswordRouteRoute: AuthNewPasswordRouteRoute,
  AuthOtpVerificationRouteRoute: AuthOtpVerificationRouteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
